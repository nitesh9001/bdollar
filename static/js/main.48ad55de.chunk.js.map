{"version":3,"sources":["component/Layout/Navbar.js","component/Dashboard/Landing.js","App.js","Assets/logo.png","Assets/landingImg.png","serviceWorker.js","index.js"],"names":["DashNavbar","className","src","logo","alt","to","id","Landing","style","width","class","aria-hidden","color","img_landing","require","config","path","__dirname","App","exact","component","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+IAIe,SAASA,IACpB,OACI,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,gBACd,yBAAKC,IAAKC,IAAMC,IAAI,OAAOH,UAAU,kBAGtC,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,cACf,kBAAC,IAAD,CAASI,GAAG,YAAYJ,UAAU,gBAAgBK,GAAG,UAArD,QACE,kBAAC,IAAD,CAASD,GAAG,YAAYJ,UAAU,iBAAlC,YACA,kBAAC,IAAD,CAASI,GAAG,QAAQJ,UAAU,iBAA9B,QACA,kBAAC,IAAD,CAASI,GAAG,WAAWJ,UAAU,iBAAjC,YACA,kBAAC,IAAD,CAASI,GAAG,aAAcJ,UAAU,iBAApC,iB,qBCwBGM,IAtCf,WACI,OACG,kBAAC,WAAD,KACA,kBAACP,EAAD,MACA,yBAAKC,UAAU,+BACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,WAAWO,MAAO,CAACC,MAAM,QACrC,yBAAKR,UAAU,mBACd,wBAAIA,UAAU,eAAd,WACY,6BADZ,sBAGA,wBAAIA,UAAU,iBAAd,sBAGA,6BACD,yBAAKA,UAAU,wBACd,uBAAGA,UAAU,eAAb,mMAED,6BACA,yBAAKA,UAAU,gBACZ,4BAAQA,UAAU,wBAAuB,iDAAzC,IAAsE,uBAAGS,MAAM,yBAAyBC,cAAY,OAAOH,MAAO,CAACI,MAAM,cACzI,4BAAQX,UAAU,2BAA0B,iDAA5C,IAAyE,uBAAGS,MAAM,yBAAyBC,cAAY,OAAOH,MAAO,CAACI,MAAM,iBAIlJ,yBAAKX,UAAU,WAAWO,MAAO,CAACC,MAAM,QACxC,yBAAKP,IAAKW,IAAaT,IAAI,gBAG9B,yBAAKH,UAAU,gCACd,yBAAKA,UAAU,uB,iCClCxB,8DAIAa,EAAQ,IAAUC,OAAO,CAACC,KAAMC,EAAY,UAqB7BC,IAlBf,WACE,OACE,yBAAKjB,UAAU,OACf,kBAAC,IAAD,KACM,yBAAKA,UAAU,OAEb,kBAAC,IAAD,CAAOkB,OAAK,EAACH,KAAK,IAAII,UAAWb,MACjC,kBAAC,IAAD,CAAOY,OAAK,EAACH,KAAK,YAAYI,UAAWb,Y,mCCdrDc,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,0KCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACZ,EAAA,EAAD,OAEFa,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.48ad55de.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport logo from '../../Assets/logo.png';\r\n\r\nexport default function DashNavbar() {\r\n    return (\r\n        <div className=\"nav_bar_pages\">\r\n          <div className=\"nav_bar_pages_parts\">\r\n          <div className=\"nav_bar_logo\">\r\n           <img src={logo} alt=\"Logo\" className=\"logo_header\"/>\r\n           </div>\r\n          </div>\r\n          <div className=\"nav_bar_pages_parts\">\r\n          <div className=\"nav_navbar\">\r\n          <NavLink to=\"/homepage\" className=\"navlink_pages\" id=\"active\">Home</NavLink>\r\n            <NavLink to=\"/services\" className=\"navlink_pages\" >Services</NavLink>\r\n            <NavLink to=\"/blog\" className=\"navlink_pages\">Blog</NavLink>\r\n            <NavLink to=\"/aboutus\" className=\"navlink_pages\">About Us</NavLink>\r\n            <NavLink to=\"/contactus\"  className=\"navlink_pages\">Contact Us</NavLink>\r\n          </div>\r\n           </div>\r\n          </div>\r\n    )\r\n}\r\n","import React ,{Fragment } from 'react';\r\nimport DashNavbar from '../Layout/Navbar';\r\nimport img_landing from '../../Assets/landingImg.png'\r\n// import { Link } from 'react-router-dom';\r\nfunction Landing() {\r\n    return (\r\n       <Fragment>\r\n       <DashNavbar/>\r\n       <div className=\"full_display_screen_windows\">\r\n         <div className=\"Inner_body_landing\">\r\n           <div className=\"img_text\" style={{width:\"30%\"}}>\r\n              <div className=\"content_landing\">\r\n               <h1 className=\"taglines_up\">\r\n                   An Idea <br/> For Better Advice\r\n               </h1>\r\n               <h1 className=\"taglines_down\">\r\n                   Software Solutions\r\n               </h1>\r\n               <br/>\r\n              <div className=\"quotes_under_tagline\">\r\n               <p className=\"quotes_line\">Our talent, your resultsâ€“ this is the premise behind bdollar Solutions.Get your optimized solution .Our team follow AGILE .Our commitment to service and quality is reflected in our work</p>\r\n              </div>\r\n              <br/>\r\n              <div className=\"btn_services\">\r\n                 <button className=\"btn_services_css sol\"><span>Try a solution </span> <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\" style={{color:\"#FAAD3B\"}}></i></button>\r\n                 <button className=\"btn_services_css expert\"><span> Talk to expert</span> <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\" style={{color:\"#17a2b8\"}}></i></button>\r\n              </div>\r\n              </div>\r\n           </div>\r\n           <div className=\"img_text\" style={{width:\"50%\"}}>\r\n           <img src={img_landing} alt=\"loading..\"/>\r\n          </div>\r\n         </div>\r\n        <div className=\"innerbody_highlight_services\">\r\n         <div className=\"highlight_box\">\r\n           \r\n         </div>\r\n        </div>\r\n        </div>\r\n       </Fragment>      \r\n    )\r\n}\r\nexport default Landing\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Landing from '../src/component/Dashboard/Landing';\nrequire('dotenv').config({path: __dirname + '/.env'})\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Router>\n          <div className=\"App\">  \n            {/* <ReactNotification />         */}\n            <Route exact path=\"/\" component={Landing} />\n            <Route exact path=\"/homepage\" component={Landing} />\n            {/* <Switch>\n              <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n              <PrivateRoute exact path=\"/loading\" component={Loading} />\n            </Switch> */}\n          </div>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.cd1d2862.png\";","module.exports = __webpack_public_path__ + \"static/media/landingImg.803ef0f1.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}